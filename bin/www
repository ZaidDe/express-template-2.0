/* eslint-disable prettier/prettier */
/* eslint-disable no-use-before-define */
/**
 * Module dependencies.
 */

const debug = require('debug')('express-template-2.0:server');
const http = require('http');
const app = require('../app');
const logger = require('../logger');

function normalizePort(val) {
  const portToNormalize = parseInt(val, 10);

  if (Number.isNaN(portToNormalize)) {
    // named pipe
    return val;
  }

  if (portToNormalize >= 0) {
    // port number
    return portToNormalize;
  }

  return false;
}

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, () => {
  logger.info(`Server live on port ${port}`);
});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`;

  // handle specific listen errors with friendly messages
  if (error.code === 'EACCESS') {
    logger.error(`${bind} requires elevated privileges`);
    process.exit(1);
  } else if (error.code === 'EADDRINUSE') {
    logger.error(`${bind} is already in use`);
    process.exit(1);
  } else {
    throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? `pipe ${addr}` : `port ${addr.port}`;
  debug(`Listening on ${bind}`);
}
